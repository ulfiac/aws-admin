name: reusable tf action
run-name: tf action on ${{ inputs.terraform_layer }} - ${{ inputs.terraform_action }}

on: 
  workflow_call:
    inputs:
      auth:
        default: oidc
        required: false
        type: string
      aws_region:
        default: us-east-2
        required: false
        type: string
      terraform_action:
        required: true
        type: string
      terraform_layer:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      auth:
        default: oidc
        description: authentication method
        options:
          - keys
          - oidc
        required: false
        type: choice
      aws_region:
        default: us-east-2
        description: aws region
        required: false
        type: choice
        options:
          - us-east-2
          - us-west-2
      terraform_action:
        default: plan
        description: terraform action
        options:
          - plan
          - plan destroy
          - apply
          - destroy
        required: true
        type: choice
      terraform_layer:
        default: admin_layer
        description: terraform layer
        options:
          - admin_layer
          - root_layer
        required: true
        type: choice

env:
  OIDC_GHA_IAM_ROLE_NAME: ${{ vars.OIDC_GHA_IAM_ROLE_NAME }}
  OIDC_GHA_PROVIDER_HOSTNAME: ${{ vars.OIDC_GHA_PROVIDER_HOSTNAME }}
  TF_LOG: OFF
  TF_LOG_CORE: OFF
  TF_LOG_PROVIDER: OFF
  TF_LOG_PATH: ./terraform.log
  TF_STATE_S3_BUCKET_NAME: ${{ vars.TF_STATE_S3_BUCKET_NAME }}
  TF_VAR_aws_region: ${{ inputs.aws_region }}

permissions:
  contents: read
  id-token: write

jobs:
  terraform_action:
    name: "${{ inputs.terraform_action }} on ${{ inputs.terraform_layer }} in ${{ inputs.aws_region }}"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform/${{ inputs.terraform_layer }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - run: pwd

      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
        with:
          terraform_wrapper: false
      - run: terraform --version

      - run: aws --version

      - name: configure aws credentials with oidc
        if: ${{ inputs.auth == 'oidc' }}
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # 4.0.2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ vars.OIDC_GHA_IAM_ROLE_NAME }}
          aws-region: ${{ inputs.aws_region }}

      - name: configure aws credentials with keys
        if: ${{ inputs.auth == 'keys' }}
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # 4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}

      - name: dump context
        run: |
          echo -e "Dumping context...\n"
          echo -e "inputs context:\n${{ toJson(inputs) }}\n"
          echo -e "env context:\n${{ toJson(env) }}\n"
          echo -e "github context:\n${{ toJson(github) }}\n"

      - run: terraform init
      - run: terraform validate

      - name: import root layer
        if: ${{ inputs.terraform_layer == 'root_layer' }}
        run: ../../scripts/import_root_layer.sh

      - run: terraform plan -out=./tfplan.binary
        if: ${{ inputs.terraform_action == 'plan' }}

      - run: terraform plan -destroy -out=./tfplan.binary
        if: ${{ inputs.terraform_action == 'plan destroy' }}

      - name: show plan summary
        if: ${{ inputs.terraform_action == 'plan' || inputs.terraform_action == 'plan destroy' }}
        run: |
          #echo; terraform show ./tfplan.binary | { grep '#' || [[ $? == 1 ]] } | { grep -v 'unchanged attribute' || [[ $? == 1 ]] } | nl
          echo; terraform show ./tfplan.binary | { grep '#' || test $? = 1; } | { grep -v 'unchanged attribute' || test $? = 1; } | nl
          echo; terraform show ./tfplan.binary | grep -E '(No changes|Plan:)'

      # - run: terraform show -json ./tfplan.out > tfplan.json
      #   if: ${{ inputs.terraform_action == 'plan' || inputs.terraform_action == 'plan destroy' }}

      - run: terraform apply -auto-approve
        if: ${{ inputs.terraform_action == 'apply' }}

      - run: terraform apply -destroy -auto-approve
        if: ${{ inputs.terraform_action == 'destroy' }}
